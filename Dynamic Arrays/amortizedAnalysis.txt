/*********************************************************************
** Program Filename: amortizedAnalysis.txt for Assignment 2
** Author: Amy Stockinger
** Date: 1/12/2019
** Description: Relevant questions given with Program Assignment 2
*********************************************************************/

1. How many cost units are spent in the entire process of performing 50 consecutive push 
operations on an empty array which starts out at capacity 8, assuming that the array will 
double in capacity each time a new item is added to an already full dynamic array? As N
(i.e. the number of pushes) grows large, under this strategy for resizing, what is the 
average big-oh complexity for a push?

    The cost is 8 (now full at 8 eleements) + 9 (8 + 1 for reallocation) + 
    7 (now full again at 16 elements) + 17 (reallocate and copy all 16 + 1) + 
    15 (now full again at 32) + 33 (copy all 32 + 1) + 17 (now at 50 pushes)= 106 units.
    As N becomes larger, the average big-O complexity for a push in this case is O(1)+. Since it
    is only slowed to O(n) when resizing, and with exponential growth, resizing is less frequent
    between pushes, we have many more O(1) operations.


2. How many cost units are spent in the entire process of performing 50 consecutive push
 operations on an empty array which starts out at capacity 8, assuming that the array will 
 grow by a constant 2 spaces each time a new item is added to an already full dynamic
array? As N (i.e. the number of pushes) grows large, under this strategy for resizing, what 
is the average big-oh complexity for a push?

    The cost is 8 + 10 + 12 + 14 + 16 + 18 + 20 + 22 + 24 + 26 + 28 + 30 + 32 + 34 + 36 + 38 + 40 +
    42 + 44 + 46 + 48 + 50 = 638 units.
    The average big-O complexity for a push in this case is O(n)+ because we are resizing very often. 